export WORKON_HOME=$HOME/.virtualenvs
export PIP_DOWNLOAD_CACHE="$HOME/.pip/"
#source /usr/bin/virtualenvwrapper.sh
source /etc/bash_completion.d/virtualenvwrapper

_fab_list(){
    # auto completion for fabfiles
    KEYWORDS=$(fab -l | grep '^ ' | awk '{ print $1 }')
    local cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "$KEYWORDS" -- ${cur}) )
}
complete -o default -o nospace -F _fab_list fab

_virtualenvs()
{
    PROJECTS=$((cd "$WORKON_HOME"; for f in */bin/activate; do echo $f; done) 2>/dev/null | sed 's|^\./||' | sed 's|/bin/activate||' | sort)
    local cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "$PROJECTS" -- ${cur}) )
}
complete -o default -o nospace -F _virtualenvs hack

function hack() {
    # A wrapper for workon (which is already a wrapper)
    # this assumes you have a 'src' dubdir in your
    # virtualenv
    #
    # This creates a rcfile for a virtualenv, creates a
    # subshell using it as rcfile, and goes to the src
    # dir in your virtualenv

    virtualenvwrapper_load
    typeset env_name="$1"
    if [ "$env_name" = "" ]
    then
        virtualenvwrapper_show_workon_options
        return 1
    fi

    virtualenvwrapper_verify_workon_environment $env_name || return 1

    echo "source ~/.bashrc
          source ~/.coderc
          workon $env_name
          cdvirtualenv
          [ -d src ] && cd src
          " > ~/.virtualenvrc

    bash --rcfile ~/.virtualenvrc
}

export PIPSI_HOME="$HOME/.virtualenvs/pipsi"
export PIPSI_BIN_DIR="$HOME/bin"
export PIPENV_SHELL_FANCY=1
export PIPENV_DEFAULT_PYTHON_VERSION="3"

#[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
export PATH="/home/amieiro/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

export PYTHONBREAKPOINT=ipdb.set_trace
