;; adds MELPA repos
;;;;;;;;;;;;;;;;;;;
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(package-initialize)

;; Base changes
;;;;;;;;;;;;;;;
(use-package emacs
  :custom
    (split-height-threshold nil)
    (split-width-threshold 160)
    (inhibit-startup-screen t)
    (scheme-program-name "\guile")
    (httpd-port 8888)
  :bind
    ("<f5>" . recompile)
  :config
    (put 'python-shell-process-environment 'safe-local-variable
      (lambda (v) '(string-prefix-p "DJANGO_SETTINGS_MODULE=" v)))
    (put 'elpy-test-runner 'safe-local-variable (lambda (_) t))
    (put 'downcase-region 'disabled nil)
    (set-face-attribute 'default nil :height 140)
  :hook
    (after-init . global-auto-revert-mode)
    (after-init . global-company-mode))

(use-package hideshow
  :hook
    (prog-mode . hs-minor-mode))

(use-package whitespace
  :custom
    (whitespace-style '(face tabs spaces trailing lines-tail space-before-tab missing-newline-at-eof empty space-mark tab-mark))
  :hook
    (after-init . global-whitespace-mode)
    (before-save . delete-trailing-whitespace))

(use-package better-defaults
  :ensure t)

;; Completion/minibuffer
;;;;;;;;;;;;;;;;;;;;;;;;

(use-package ivy
  :ensure t
  :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "(%d/%d) ")
  :config
    (ivy-mode 1)
    (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy))))

(use-package ivy-rich
  :ensure t
  :config
    (ivy-rich-mode 1))

(use-package counsel
  :ensure t
  :config
    (setq ivy-initial-inputs-alist nil)
    (counsel-mode))

;; Packages used by other packages
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package eglot
  :ensure t)

(use-package f
  :ensure t)

(use-package flycheck
  :ensure t
  :hook
    (after-init . global-flycheck-mode))

(use-package pdf-tools
  :ensure t)


;; modes for diferent filetypes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package dts-mode
  :ensure t
  :mode ("\\.dts\\'" "\\.dtsi\\'"))

(use-package flymake-shellcheck
  :ensure t
  :hook
  (sh-mode-hook . flymake-shellcheck-load))

(use-package glsl-mode
  :ensure t)

(use-package markdown-mode
  :ensure t)

(use-package js2-mode
  :ensure t
  :mode "\\.js\\'")

(use-package skewer-mode
  :ensure t
  :hook
    (js2-mode . skewer-mode))

(use-package yaml-mode
  :ensure t
  :mode "\\.yml\\'")


; python
;;;;;;;;

(use-package elpy
  :ensure t
  :defer t
  :requires flycheck
  :after flycheck
  :custom
    (elpy-formatter "black")
    (elpy-rpc-virtualenv-path 'current)
  :hook
    (eply-mode . flycheck-mode)
  :init
    (advice-add 'python-mode :before 'elpy-enable)
  :config
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules)))

(use-package blacken
  :ensure t
  :after elpy
  :bind
    (:map elpy-refactor-map
      ; This currently does not show up as an option in the minibuffer, but works.
      ("f" . blacken-buffer)))

(defun ssbb-pyenv-auto ()
  "Automatically activates pyenv version if .python-version file exists."
  (f-traverse-upwards
   (lambda (path)
     (let ((pyenv-version-path (f-expand ".python-version" path)))
       (if (f-exists? pyenv-version-path)
          (pyenv-mode-set (s-trim (f-read-text pyenv-version-path 'utf-8))))))))

(use-package pyenv-mode
 :ensure t
 :defer t
 :requires f
 :after elpy
 :hook
   (elpy-mode . pyenv-mode)
   (elpy-mode . ssbb-pyenv-auto))


; Rust
;;;;;;

(require 'rust-mode)
(add-hook 'rust-mode-hook (lambda () (setq indent-tabs-mode nil)))
(add-hook 'rust-mode-hook 'eglot-ensure)
(add-to-list 'eglot-server-programs
             '((rust-ts-mode rust-mode) .
               ("rust-analyzer" :initializationOptions (:check (:command "clippy")))))


(use-package flycheck-rust
  :ensure t
  :after rust-mode
  :hook
    (flycheck-mode . flycheck-rust-setup))


; org-mode
;;;;;;;;;;
(use-package org
  :ensure t
  :custom ((org-directory (file-truename "~/org"))
           (org-default-notes-file (concat org-directory "/roam/inbox.org"))
           (org-agenda-files (directory-files-recursively org-directory "\\.org$"))
           (org-cycle-separator-lines -1)
           (org-display-inline-images t)
           (org-special-ctrl-a/e t)
           (org-pretty-entities t)
           (org-use-sub-superscripts "{}")
           (org-hide-emphasis-markers t))
  :hook (org-mode . org-indent-mode)
  :config (org-babel-do-load-languages
           'org-babel-load-languages
           '((C . t)
             (python . t)
             (shell . t)))
  :bind (("C-c C-g l" . org-store-link)
         ("C-c C-g a" . org-agenda)
         ("C-c C-g c" . org-capture)))

(use-package org-appear
  :ensure t
  :custom
    (org-appear-autolinks t)
  :hook
    (org-mode . org-appear-mode))

(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory (concat org-directory "/roam"))
  (org-roam-completion-everywhere t)
  (org-roam-dailies-capture-templates
      '(("d" "default" plain "** %?"
         :target (file+head+olp "%<%Y-%m-%d>.org" ":PROPERTIES:\n:ID:       ${org-roam-node-id}\n:END:\n#+title: %<%Y-%m-%d>\n#+filetags: :daily:\n" ("Inbox"))
         :empty-lines 1
         :empty-lines-before 2)))
  :config
  (org-roam-db-autosync-mode)
  (add-to-list 'display-buffer-alist
             '("\\*org-roam\\*"
               (display-buffer-in-side-window)
               (side . right)
               (slot . 0)
               (window-width . 0.33)
               (window-parameters . ((no-other-window . t)
                                     (no-delete-other-windows . t)))))
  (require 'org-roam-dailies)
  :bind ((:map org-mode-map
           (("C-c n f" . org-roam-node-find)
            ("C-c n i" . org-roam-node-insert)
            ("C-c n r" . org-roam-refile)
            ("C-c n l" . org-roam-buffer-toggle))))
  :bind-keymap ("C-c C-g d" . org-roam-dailies-map))

(use-package org-download
  :ensure t
  :after org
  :custom
  (org-download-method 'attach)
  (org-download-heading-lvl nil)
  (org-download-timestamp "%Y-%m-%d_%H-%M-%S_")
  (org-startup-with-inline-images t)
  :bind
  (:map org-mode-map
    (("s-Y" . org-download-clipboard)
     ("s-y" . org-download-yank))))

(use-package org-noter
  :ensure t)

;; Inferior programs
;;;;;;;;;;;;;;;;;;;;
(use-package magit
  :ensure t
  :custom
    (magit-blame-echo-style 'headings)
  :bind
    ("C-x g" . magit-status)
    ("C-x M-g" . magit-dispatch)
  :hook
    (git-commit-setup . git-commit-turn-on-flyspell))


;; Misc
;;;;;;;
(use-package expand-region
  :bind
    ("C-=" . er/expand-region))


;; UI customization
;;;;;;;;;;;;;;;;;;;;
(use-package display-line-numbers
  :hook
    (after-init . global-display-line-numbers-mode))

(use-package catppuccin-theme
  :ensure t
  :config
    (load-theme 'catppuccin :no-confirm))
